// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xfury/orderbook/exposure.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BookOddsExposure represents the exposures taken on odds
type BookOddsExposure struct {
	// book_uid is the unique identifier corresponding to the book
	BookUID string `protobuf:"bytes,1,opt,name=book_uid,proto3" json:"book_uid"`
	// odds_uid is odds uid
	OddsUID          string   `protobuf:"bytes,2,opt,name=odds_uid,proto3" json:"odds_uid"`
	FulfillmentQueue []uint64 `protobuf:"varint,3,rep,packed,name=fulfillment_queue,json=fulfillmentQueue,proto3" json:"fulfillment_queue,omitempty" yaml:"fulfillment_queue"`
}

func (m *BookOddsExposure) Reset()      { *m = BookOddsExposure{} }
func (*BookOddsExposure) ProtoMessage() {}
func (*BookOddsExposure) Descriptor() ([]byte, []int) {
	return fileDescriptor_d143ece5c0968824, []int{0}
}
func (m *BookOddsExposure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookOddsExposure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookOddsExposure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookOddsExposure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookOddsExposure.Merge(m, src)
}
func (m *BookOddsExposure) XXX_Size() int {
	return m.Size()
}
func (m *BookOddsExposure) XXX_DiscardUnknown() {
	xxx_messageInfo_BookOddsExposure.DiscardUnknown(m)
}

var xxx_messageInfo_BookOddsExposure proto.InternalMessageInfo

// ParticipationExposure represents the exposures taken on odds by
// participations
type ParticipationExposure struct {
	// book_uid is the unique identifier corresponding to the book
	BookUID string `protobuf:"bytes,1,opt,name=book_uid,proto3" json:"book_uid"`
	// odds_uid is odd's uid
	OddsUID string `protobuf:"bytes,2,opt,name=odds_uid,proto3" json:"odds_uid"`
	// participation_index is the id of initial participation queue
	ParticipationIndex uint64 `protobuf:"varint,3,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty" yaml:"participation_index"`
	// exposure is the total exposure taken on given odd
	Exposure github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=exposure,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"exposure" yaml:"exposure"`
	// bet_amount is the total bet amount corresponding to the exposure
	BetAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=bet_amount,json=betAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_amount" yaml:"bet_amount"`
	IsFulfilled bool                                   `protobuf:"varint,6,opt,name=is_fulfilled,json=isFulfilled,proto3" json:"is_fulfilled,omitempty" yaml:"is_fulfilled"`
	// number of current round in queue
	Round uint64 `protobuf:"varint,7,opt,name=round,proto3" json:"round,omitempty" yaml:"round"`
}

func (m *ParticipationExposure) Reset()      { *m = ParticipationExposure{} }
func (*ParticipationExposure) ProtoMessage() {}
func (*ParticipationExposure) Descriptor() ([]byte, []int) {
	return fileDescriptor_d143ece5c0968824, []int{1}
}
func (m *ParticipationExposure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipationExposure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipationExposure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipationExposure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipationExposure.Merge(m, src)
}
func (m *ParticipationExposure) XXX_Size() int {
	return m.Size()
}
func (m *ParticipationExposure) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipationExposure.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipationExposure proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BookOddsExposure)(nil), "furysports.xfury.orderbook.BookOddsExposure")
	proto.RegisterType((*ParticipationExposure)(nil), "furysports.xfury.orderbook.ParticipationExposure")
}

func init() { proto.RegisterFile("xfury/orderbook/exposure.proto", fileDescriptor_d143ece5c0968824) }

var fileDescriptor_d143ece5c0968824 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xb7, 0x69, 0xda, 0xa6, 0x47, 0x24, 0x52, 0x17, 0x54, 0x53, 0x81, 0x2f, 0xf2, 0x50, 0x65,
	0xa9, 0x8d, 0xd4, 0x2d, 0x5b, 0xcd, 0x1f, 0x29, 0x2c, 0x05, 0x4b, 0x2c, 0x48, 0xc8, 0xb2, 0x73,
	0x97, 0x60, 0x25, 0xf6, 0x33, 0xbe, 0xb3, 0x94, 0x7c, 0x02, 0x18, 0x19, 0x19, 0xf3, 0x71, 0x3a,
	0x76, 0x41, 0x42, 0x0c, 0x27, 0x94, 0x2c, 0x88, 0xd1, 0x9f, 0x00, 0xdd, 0x39, 0x71, 0x5d, 0xc1,
	0xc2, 0xc4, 0xe4, 0xe7, 0xf7, 0xfb, 0xf3, 0xee, 0xf9, 0xfc, 0x43, 0x8f, 0xc7, 0x45, 0xbe, 0x70,
	0x21, 0x27, 0x34, 0x8f, 0x00, 0xa6, 0x2e, 0x9d, 0x67, 0xc0, 0x8a, 0x9c, 0x3a, 0x59, 0x0e, 0x1c,
	0x8c, 0x87, 0x12, 0x66, 0x19, 0xe4, 0x9c, 0x39, 0xb2, 0x74, 0x6a, 0xe6, 0xc9, 0xfd, 0x09, 0x4c,
	0x40, 0xb1, 0x5c, 0x59, 0x55, 0x02, 0xfb, 0xab, 0x8e, 0xba, 0x1e, 0xc0, 0xf4, 0x92, 0x10, 0xf6,
	0x7c, 0xe3, 0x65, 0x9c, 0xa3, 0xb6, 0x94, 0x04, 0x45, 0x4c, 0x4c, 0xbd, 0xa7, 0xf7, 0x0f, 0xbc,
	0xe3, 0x95, 0xc0, 0xfb, 0x92, 0xf7, 0x66, 0xf8, 0xec, 0x97, 0xc0, 0x35, 0xec, 0xd7, 0x95, 0x14,
	0x01, 0x21, 0x4c, 0x89, 0xee, 0xdc, 0x88, 0xa4, 0xf1, 0x46, 0xb4, 0x85, 0xfd, 0xba, 0x32, 0x86,
	0xe8, 0x70, 0x5c, 0xcc, 0xc6, 0xf1, 0x6c, 0x96, 0xd0, 0x94, 0x07, 0x1f, 0x0a, 0x5a, 0x50, 0x73,
	0xa7, 0xb7, 0xd3, 0x6f, 0x79, 0x8f, 0x4a, 0x81, 0xcd, 0x45, 0x98, 0xcc, 0x06, 0xf6, 0x1f, 0x14,
	0xdb, 0xef, 0x36, 0x7a, 0xaf, 0x65, 0x6b, 0xd0, 0xf9, 0xb4, 0xc4, 0xda, 0x97, 0x25, 0xd6, 0x7e,
	0x2e, 0xb1, 0x66, 0x7f, 0x6c, 0xa1, 0x07, 0xaf, 0xc2, 0x9c, 0xc7, 0xa3, 0x38, 0x0b, 0x79, 0x0c,
	0xe9, 0x7f, 0x58, 0xee, 0x12, 0x1d, 0x65, 0xcd, 0x23, 0x04, 0x71, 0x4a, 0xe8, 0xdc, 0xdc, 0xe9,
	0xe9, 0xfd, 0x96, 0x67, 0x95, 0x02, 0x9f, 0x54, 0xeb, 0xfd, 0x85, 0x64, 0xfb, 0xc6, 0xad, 0xee,
	0x50, 0x36, 0x8d, 0x77, 0xa8, 0xbd, 0xbd, 0x6f, 0xb3, 0xa5, 0x4e, 0x71, 0x71, 0x25, 0xb0, 0xf6,
	0x5d, 0xe0, 0xd3, 0x49, 0xcc, 0xdf, 0x17, 0x91, 0x33, 0x82, 0xc4, 0x1d, 0x01, 0x4b, 0x80, 0x6d,
	0x1e, 0x67, 0x8c, 0x4c, 0x5d, 0xbe, 0xc8, 0x28, 0x73, 0x86, 0x29, 0x2f, 0x05, 0xbe, 0x57, 0xcd,
	0xdc, 0xfa, 0xd8, 0x7e, 0x6d, 0x69, 0x44, 0x08, 0x45, 0x94, 0x07, 0x61, 0x02, 0x45, 0xca, 0xcd,
	0x5d, 0x35, 0xe0, 0xe9, 0x3f, 0x0f, 0x38, 0xac, 0x06, 0xdc, 0x38, 0xd9, 0xfe, 0x41, 0x44, 0xf9,
	0x85, 0xaa, 0x8d, 0x01, 0xea, 0xc4, 0x2c, 0xd8, 0x5c, 0x1e, 0x25, 0xe6, 0x5e, 0x4f, 0xef, 0xb7,
	0xbd, 0xe3, 0x52, 0xe0, 0xa3, 0x4a, 0xd7, 0x44, 0x6d, 0xff, 0x6e, 0xcc, 0x5e, 0x6c, 0xdf, 0x8c,
	0x53, 0xb4, 0x9b, 0x43, 0x91, 0x12, 0x73, 0x5f, 0x7d, 0xc1, 0x6e, 0x29, 0x70, 0xa7, 0x12, 0xa9,
	0xb6, 0xed, 0x57, 0xf0, 0xed, 0x3f, 0xc1, 0x7b, 0x79, 0xb5, 0xb2, 0xf4, 0xeb, 0x95, 0xa5, 0xff,
	0x58, 0x59, 0xfa, 0xe7, 0xb5, 0xa5, 0x5d, 0xaf, 0x2d, 0xed, 0xdb, 0xda, 0xd2, 0xde, 0x3e, 0x69,
	0xec, 0x34, 0x0e, 0x53, 0x99, 0x97, 0xb3, 0x2a, 0x3b, 0xae, 0x4a, 0xd9, 0xbc, 0x91, 0x33, 0xb5,
	0x61, 0xb4, 0xa7, 0x42, 0x73, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xeb, 0x78, 0x25, 0x86,
	0x03, 0x00, 0x00,
}

func (m *BookOddsExposure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookOddsExposure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookOddsExposure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FulfillmentQueue) > 0 {
		dAtA2 := make([]byte, len(m.FulfillmentQueue)*10)
		var j1 int
		for _, num := range m.FulfillmentQueue {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintExposure(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OddsUID) > 0 {
		i -= len(m.OddsUID)
		copy(dAtA[i:], m.OddsUID)
		i = encodeVarintExposure(dAtA, i, uint64(len(m.OddsUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUID) > 0 {
		i -= len(m.BookUID)
		copy(dAtA[i:], m.BookUID)
		i = encodeVarintExposure(dAtA, i, uint64(len(m.BookUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipationExposure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipationExposure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipationExposure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		i = encodeVarintExposure(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFulfilled {
		i--
		if m.IsFulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.BetAmount.Size()
		i -= size
		if _, err := m.BetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExposure(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Exposure.Size()
		i -= size
		if _, err := m.Exposure.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExposure(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ParticipationIndex != 0 {
		i = encodeVarintExposure(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OddsUID) > 0 {
		i -= len(m.OddsUID)
		copy(dAtA[i:], m.OddsUID)
		i = encodeVarintExposure(dAtA, i, uint64(len(m.OddsUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUID) > 0 {
		i -= len(m.BookUID)
		copy(dAtA[i:], m.BookUID)
		i = encodeVarintExposure(dAtA, i, uint64(len(m.BookUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExposure(dAtA []byte, offset int, v uint64) int {
	offset -= sovExposure(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BookOddsExposure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUID)
	if l > 0 {
		n += 1 + l + sovExposure(uint64(l))
	}
	l = len(m.OddsUID)
	if l > 0 {
		n += 1 + l + sovExposure(uint64(l))
	}
	if len(m.FulfillmentQueue) > 0 {
		l = 0
		for _, e := range m.FulfillmentQueue {
			l += sovExposure(uint64(e))
		}
		n += 1 + sovExposure(uint64(l)) + l
	}
	return n
}

func (m *ParticipationExposure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUID)
	if l > 0 {
		n += 1 + l + sovExposure(uint64(l))
	}
	l = len(m.OddsUID)
	if l > 0 {
		n += 1 + l + sovExposure(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovExposure(uint64(m.ParticipationIndex))
	}
	l = m.Exposure.Size()
	n += 1 + l + sovExposure(uint64(l))
	l = m.BetAmount.Size()
	n += 1 + l + sovExposure(uint64(l))
	if m.IsFulfilled {
		n += 2
	}
	if m.Round != 0 {
		n += 1 + sovExposure(uint64(m.Round))
	}
	return n
}

func sovExposure(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExposure(x uint64) (n int) {
	return sovExposure(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BookOddsExposure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExposure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookOddsExposure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookOddsExposure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExposure
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FulfillmentQueue = append(m.FulfillmentQueue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExposure
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExposure
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExposure
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FulfillmentQueue) == 0 {
					m.FulfillmentQueue = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExposure
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FulfillmentQueue = append(m.FulfillmentQueue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillmentQueue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExposure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExposure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipationExposure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExposure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipationExposure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipationExposure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exposure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exposure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFulfilled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExposure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExposure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExposure(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExposure
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExposure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExposure
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExposure
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExposure
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExposure        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExposure          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExposure = fmt.Errorf("proto: unexpected end of group")
)
