// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xfury/orderbook/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
// Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
// Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryOrderBooksRequest is request type for Query/OrderBooks RPC method.
type QueryOrderBooksRequest struct {
	// status enables to query for order bookds matching a given status.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrderBooksRequest) Reset()         { *m = QueryOrderBooksRequest{} }
func (m *QueryOrderBooksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBooksRequest) ProtoMessage()    {}
func (*QueryOrderBooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{2}
}
func (m *QueryOrderBooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBooksRequest.Merge(m, src)
}
func (m *QueryOrderBooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBooksRequest proto.InternalMessageInfo

func (m *QueryOrderBooksRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryOrderBooksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOrderBooksResponse is response type for the Query/OrderBooks RPC method
type QueryOrderBooksResponse struct {
	// orderbooks contains all the queried order books.
	Orderbooks []OrderBook `protobuf:"bytes,1,rep,name=orderbooks,proto3" json:"orderbooks"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrderBooksResponse) Reset()         { *m = QueryOrderBooksResponse{} }
func (m *QueryOrderBooksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBooksResponse) ProtoMessage()    {}
func (*QueryOrderBooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{3}
}
func (m *QueryOrderBooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBooksResponse.Merge(m, src)
}
func (m *QueryOrderBooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBooksResponse proto.InternalMessageInfo

func (m *QueryOrderBooksResponse) GetOrderbooks() []OrderBook {
	if m != nil {
		return m.Orderbooks
	}
	return nil
}

func (m *QueryOrderBooksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOrderBookRequest is request type for the Query/OrderBook RPC method
type QueryOrderBookRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
}

func (m *QueryOrderBookRequest) Reset()         { *m = QueryOrderBookRequest{} }
func (m *QueryOrderBookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBookRequest) ProtoMessage()    {}
func (*QueryOrderBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{4}
}
func (m *QueryOrderBookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBookRequest.Merge(m, src)
}
func (m *QueryOrderBookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBookRequest proto.InternalMessageInfo

func (m *QueryOrderBookRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

// QueryOrderBookResponse is response type for the Query/OrderBook RPC method
type QueryOrderBookResponse struct {
	// orderBook defines the the order book info.
	Orderbook OrderBook `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook"`
}

func (m *QueryOrderBookResponse) Reset()         { *m = QueryOrderBookResponse{} }
func (m *QueryOrderBookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBookResponse) ProtoMessage()    {}
func (*QueryOrderBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{5}
}
func (m *QueryOrderBookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBookResponse.Merge(m, src)
}
func (m *QueryOrderBookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBookResponse proto.InternalMessageInfo

func (m *QueryOrderBookResponse) GetOrderbook() OrderBook {
	if m != nil {
		return m.Orderbook
	}
	return OrderBook{}
}

// QueryBookParticipationsRequest is request type for the
// Query/BookParticipations RPC method
type QueryBookParticipationsRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookParticipationsRequest) Reset()         { *m = QueryBookParticipationsRequest{} }
func (m *QueryBookParticipationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipationsRequest) ProtoMessage()    {}
func (*QueryBookParticipationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{6}
}
func (m *QueryBookParticipationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipationsRequest.Merge(m, src)
}
func (m *QueryBookParticipationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipationsRequest proto.InternalMessageInfo

func (m *QueryBookParticipationsRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryBookParticipationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookParticipationsResponse is response type for the
// Query/BookParticipations RPC method
type QueryBookParticipationsResponse struct {
	BookParticipations []BookParticipation `protobuf:"bytes,1,rep,name=book_participations,json=bookParticipations,proto3" json:"book_participations"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookParticipationsResponse) Reset()         { *m = QueryBookParticipationsResponse{} }
func (m *QueryBookParticipationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipationsResponse) ProtoMessage()    {}
func (*QueryBookParticipationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{7}
}
func (m *QueryBookParticipationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipationsResponse.Merge(m, src)
}
func (m *QueryBookParticipationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipationsResponse proto.InternalMessageInfo

func (m *QueryBookParticipationsResponse) GetBookParticipations() []BookParticipation {
	if m != nil {
		return m.BookParticipations
	}
	return nil
}

func (m *QueryBookParticipationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookParticipationRequest is request type for the Query/BookParticipation
// RPC method
type QueryBookParticipationRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	// participation_index defines the participation index to query for
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty"`
}

func (m *QueryBookParticipationRequest) Reset()         { *m = QueryBookParticipationRequest{} }
func (m *QueryBookParticipationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipationRequest) ProtoMessage()    {}
func (*QueryBookParticipationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{8}
}
func (m *QueryBookParticipationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipationRequest.Merge(m, src)
}
func (m *QueryBookParticipationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipationRequest proto.InternalMessageInfo

func (m *QueryBookParticipationRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryBookParticipationRequest) GetParticipationIndex() uint64 {
	if m != nil {
		return m.ParticipationIndex
	}
	return 0
}

// QueryBookParticipationResponse is response type for the
// Query/BookParticipation RPC method
type QueryBookParticipationResponse struct {
	// book_participation defines the the book participation info.
	BookParticipation BookParticipation `protobuf:"bytes,1,opt,name=book_participation,json=bookParticipation,proto3" json:"book_participation"`
}

func (m *QueryBookParticipationResponse) Reset()         { *m = QueryBookParticipationResponse{} }
func (m *QueryBookParticipationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipationResponse) ProtoMessage()    {}
func (*QueryBookParticipationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{9}
}
func (m *QueryBookParticipationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipationResponse.Merge(m, src)
}
func (m *QueryBookParticipationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipationResponse proto.InternalMessageInfo

func (m *QueryBookParticipationResponse) GetBookParticipation() BookParticipation {
	if m != nil {
		return m.BookParticipation
	}
	return BookParticipation{}
}

// QueryBookExposuresRequest is request type for the Query/BookExposures RPC
// method
type QueryBookExposuresRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookExposuresRequest) Reset()         { *m = QueryBookExposuresRequest{} }
func (m *QueryBookExposuresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposuresRequest) ProtoMessage()    {}
func (*QueryBookExposuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{10}
}
func (m *QueryBookExposuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposuresRequest.Merge(m, src)
}
func (m *QueryBookExposuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposuresRequest proto.InternalMessageInfo

func (m *QueryBookExposuresRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryBookExposuresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookExposuresResponse is response type for the Query/BookExposures RPC
// method
type QueryBookExposuresResponse struct {
	BookExposures []BookOddsExposure `protobuf:"bytes,1,rep,name=book_exposures,json=bookExposures,proto3" json:"book_exposures"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookExposuresResponse) Reset()         { *m = QueryBookExposuresResponse{} }
func (m *QueryBookExposuresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposuresResponse) ProtoMessage()    {}
func (*QueryBookExposuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{11}
}
func (m *QueryBookExposuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposuresResponse.Merge(m, src)
}
func (m *QueryBookExposuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposuresResponse proto.InternalMessageInfo

func (m *QueryBookExposuresResponse) GetBookExposures() []BookOddsExposure {
	if m != nil {
		return m.BookExposures
	}
	return nil
}

func (m *QueryBookExposuresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookExposureRequest is request type for the Query/BookExposure RPC
// method
type QueryBookExposureRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	// odds_uid defines the odds id to query for.
	OddsUid string `protobuf:"bytes,2,opt,name=odds_uid,json=oddsUid,proto3" json:"odds_uid,omitempty"`
}

func (m *QueryBookExposureRequest) Reset()         { *m = QueryBookExposureRequest{} }
func (m *QueryBookExposureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposureRequest) ProtoMessage()    {}
func (*QueryBookExposureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{12}
}
func (m *QueryBookExposureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposureRequest.Merge(m, src)
}
func (m *QueryBookExposureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposureRequest proto.InternalMessageInfo

func (m *QueryBookExposureRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryBookExposureRequest) GetOddsUid() string {
	if m != nil {
		return m.OddsUid
	}
	return ""
}

// QueryBookExposureResponse is response type for the Query/BookExposure RPC
// method
type QueryBookExposureResponse struct {
	// book_exposure defines the the book exposure info.
	BookExposure BookOddsExposure `protobuf:"bytes,1,opt,name=book_exposure,json=bookExposure,proto3" json:"book_exposure"`
}

func (m *QueryBookExposureResponse) Reset()         { *m = QueryBookExposureResponse{} }
func (m *QueryBookExposureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposureResponse) ProtoMessage()    {}
func (*QueryBookExposureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{13}
}
func (m *QueryBookExposureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposureResponse.Merge(m, src)
}
func (m *QueryBookExposureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposureResponse proto.InternalMessageInfo

func (m *QueryBookExposureResponse) GetBookExposure() BookOddsExposure {
	if m != nil {
		return m.BookExposure
	}
	return BookOddsExposure{}
}

// QueryParticipationExposuresRequest is request type for the
// Query/ParticipationExposures RPC method
type QueryParticipationExposuresRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipationExposuresRequest) Reset()         { *m = QueryParticipationExposuresRequest{} }
func (m *QueryParticipationExposuresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipationExposuresRequest) ProtoMessage()    {}
func (*QueryParticipationExposuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{14}
}
func (m *QueryParticipationExposuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipationExposuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipationExposuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipationExposuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipationExposuresRequest.Merge(m, src)
}
func (m *QueryParticipationExposuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipationExposuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipationExposuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipationExposuresRequest proto.InternalMessageInfo

func (m *QueryParticipationExposuresRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryParticipationExposuresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipationExposuresResponse is response type for the
// Query/ParticipationExposures RPC method
type QueryParticipationExposuresResponse struct {
	ParticipationExposures []ParticipationExposure `protobuf:"bytes,1,rep,name=participation_exposures,json=participationExposures,proto3" json:"participation_exposures"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipationExposuresResponse) Reset()         { *m = QueryParticipationExposuresResponse{} }
func (m *QueryParticipationExposuresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipationExposuresResponse) ProtoMessage()    {}
func (*QueryParticipationExposuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{15}
}
func (m *QueryParticipationExposuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipationExposuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipationExposuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipationExposuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipationExposuresResponse.Merge(m, src)
}
func (m *QueryParticipationExposuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipationExposuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipationExposuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipationExposuresResponse proto.InternalMessageInfo

func (m *QueryParticipationExposuresResponse) GetParticipationExposures() []ParticipationExposure {
	if m != nil {
		return m.ParticipationExposures
	}
	return nil
}

func (m *QueryParticipationExposuresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipationExposureRequest is request type for the
// Query/ParticipationExposure RPC method
type QueryParticipationExposureRequest struct {
	// book_uid defines the book id to query for.
	BookUid            string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipationExposureRequest) Reset()         { *m = QueryParticipationExposureRequest{} }
func (m *QueryParticipationExposureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipationExposureRequest) ProtoMessage()    {}
func (*QueryParticipationExposureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{16}
}
func (m *QueryParticipationExposureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipationExposureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipationExposureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipationExposureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipationExposureRequest.Merge(m, src)
}
func (m *QueryParticipationExposureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipationExposureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipationExposureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipationExposureRequest proto.InternalMessageInfo

func (m *QueryParticipationExposureRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryParticipationExposureRequest) GetParticipationIndex() uint64 {
	if m != nil {
		return m.ParticipationIndex
	}
	return 0
}

func (m *QueryParticipationExposureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipationExposureResponse is response type for the
// Query/ParticipationExposure RPC method
type QueryParticipationExposureResponse struct {
	// book_exposure defines the the book exposure info.
	ParticipationExposure []ParticipationExposure `protobuf:"bytes,1,rep,name=participation_exposure,json=participationExposure,proto3" json:"participation_exposure"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipationExposureResponse) Reset()         { *m = QueryParticipationExposureResponse{} }
func (m *QueryParticipationExposureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipationExposureResponse) ProtoMessage()    {}
func (*QueryParticipationExposureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{17}
}
func (m *QueryParticipationExposureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipationExposureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipationExposureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipationExposureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipationExposureResponse.Merge(m, src)
}
func (m *QueryParticipationExposureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipationExposureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipationExposureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipationExposureResponse proto.InternalMessageInfo

func (m *QueryParticipationExposureResponse) GetParticipationExposure() []ParticipationExposure {
	if m != nil {
		return m.ParticipationExposure
	}
	return nil
}

func (m *QueryParticipationExposureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryHistoricalParticipationExposuresRequest is request type for the
// Query/HistoricalParticipationExposures RPC method
type QueryHistoricalParticipationExposuresRequest struct {
	// book_uid defines the book id to query for.
	BookUid string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryHistoricalParticipationExposuresRequest) Reset() {
	*m = QueryHistoricalParticipationExposuresRequest{}
}
func (m *QueryHistoricalParticipationExposuresRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryHistoricalParticipationExposuresRequest) ProtoMessage() {}
func (*QueryHistoricalParticipationExposuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{18}
}
func (m *QueryHistoricalParticipationExposuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalParticipationExposuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalParticipationExposuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalParticipationExposuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalParticipationExposuresRequest.Merge(m, src)
}
func (m *QueryHistoricalParticipationExposuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalParticipationExposuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalParticipationExposuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalParticipationExposuresRequest proto.InternalMessageInfo

func (m *QueryHistoricalParticipationExposuresRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryHistoricalParticipationExposuresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryHistoricalParticipationExposuresResponse is response type for the
// Query/HistoricalParticipationExposures RPC method
type QueryHistoricalParticipationExposuresResponse struct {
	ParticipationExposures []ParticipationExposure `protobuf:"bytes,1,rep,name=participation_exposures,json=participationExposures,proto3" json:"participation_exposures"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryHistoricalParticipationExposuresResponse) Reset() {
	*m = QueryHistoricalParticipationExposuresResponse{}
}
func (m *QueryHistoricalParticipationExposuresResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryHistoricalParticipationExposuresResponse) ProtoMessage() {}
func (*QueryHistoricalParticipationExposuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{19}
}
func (m *QueryHistoricalParticipationExposuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalParticipationExposuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalParticipationExposuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalParticipationExposuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalParticipationExposuresResponse.Merge(m, src)
}
func (m *QueryHistoricalParticipationExposuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalParticipationExposuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalParticipationExposuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalParticipationExposuresResponse proto.InternalMessageInfo

func (m *QueryHistoricalParticipationExposuresResponse) GetParticipationExposures() []ParticipationExposure {
	if m != nil {
		return m.ParticipationExposures
	}
	return nil
}

func (m *QueryHistoricalParticipationExposuresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipationFulfilledBetsRequest is request type for the
// Query/ParticipationFulfilledBets RPC method
type QueryParticipationFulfilledBetsRequest struct {
	// book_uid defines the book id to query for.
	BookUid            string `protobuf:"bytes,1,opt,name=book_uid,json=bookUid,proto3" json:"book_uid,omitempty"`
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipationFulfilledBetsRequest) Reset() {
	*m = QueryParticipationFulfilledBetsRequest{}
}
func (m *QueryParticipationFulfilledBetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipationFulfilledBetsRequest) ProtoMessage()    {}
func (*QueryParticipationFulfilledBetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{20}
}
func (m *QueryParticipationFulfilledBetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipationFulfilledBetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipationFulfilledBetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipationFulfilledBetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipationFulfilledBetsRequest.Merge(m, src)
}
func (m *QueryParticipationFulfilledBetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipationFulfilledBetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipationFulfilledBetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipationFulfilledBetsRequest proto.InternalMessageInfo

func (m *QueryParticipationFulfilledBetsRequest) GetBookUid() string {
	if m != nil {
		return m.BookUid
	}
	return ""
}

func (m *QueryParticipationFulfilledBetsRequest) GetParticipationIndex() uint64 {
	if m != nil {
		return m.ParticipationIndex
	}
	return 0
}

func (m *QueryParticipationFulfilledBetsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipationFulfilledBetsResponse is response type for the
// Query/ParticipationFulfilledBets RPC method
type QueryParticipationFulfilledBetsResponse struct {
	// book_exposure defines the the book exposure info.
	ParticipationBets []ParticipationBetPair `protobuf:"bytes,1,rep,name=participation_bets,json=participationBets,proto3" json:"participation_bets"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipationFulfilledBetsResponse) Reset() {
	*m = QueryParticipationFulfilledBetsResponse{}
}
func (m *QueryParticipationFulfilledBetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipationFulfilledBetsResponse) ProtoMessage()    {}
func (*QueryParticipationFulfilledBetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2870b7af7b89d512, []int{21}
}
func (m *QueryParticipationFulfilledBetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipationFulfilledBetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipationFulfilledBetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipationFulfilledBetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipationFulfilledBetsResponse.Merge(m, src)
}
func (m *QueryParticipationFulfilledBetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipationFulfilledBetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipationFulfilledBetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipationFulfilledBetsResponse proto.InternalMessageInfo

func (m *QueryParticipationFulfilledBetsResponse) GetParticipationBets() []ParticipationBetPair {
	if m != nil {
		return m.ParticipationBets
	}
	return nil
}

func (m *QueryParticipationFulfilledBetsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "furysports.xfury.orderbook.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "furysports.xfury.orderbook.QueryParamsResponse")
	proto.RegisterType((*QueryOrderBooksRequest)(nil), "furysports.xfury.orderbook.QueryOrderBooksRequest")
	proto.RegisterType((*QueryOrderBooksResponse)(nil), "furysports.xfury.orderbook.QueryOrderBooksResponse")
	proto.RegisterType((*QueryOrderBookRequest)(nil), "furysports.xfury.orderbook.QueryOrderBookRequest")
	proto.RegisterType((*QueryOrderBookResponse)(nil), "furysports.xfury.orderbook.QueryOrderBookResponse")
	proto.RegisterType((*QueryBookParticipationsRequest)(nil), "furysports.xfury.orderbook.QueryBookParticipationsRequest")
	proto.RegisterType((*QueryBookParticipationsResponse)(nil), "furysports.xfury.orderbook.QueryBookParticipationsResponse")
	proto.RegisterType((*QueryBookParticipationRequest)(nil), "furysports.xfury.orderbook.QueryBookParticipationRequest")
	proto.RegisterType((*QueryBookParticipationResponse)(nil), "furysports.xfury.orderbook.QueryBookParticipationResponse")
	proto.RegisterType((*QueryBookExposuresRequest)(nil), "furysports.xfury.orderbook.QueryBookExposuresRequest")
	proto.RegisterType((*QueryBookExposuresResponse)(nil), "furysports.xfury.orderbook.QueryBookExposuresResponse")
	proto.RegisterType((*QueryBookExposureRequest)(nil), "furysports.xfury.orderbook.QueryBookExposureRequest")
	proto.RegisterType((*QueryBookExposureResponse)(nil), "furysports.xfury.orderbook.QueryBookExposureResponse")
	proto.RegisterType((*QueryParticipationExposuresRequest)(nil), "furysports.xfury.orderbook.QueryParticipationExposuresRequest")
	proto.RegisterType((*QueryParticipationExposuresResponse)(nil), "furysports.xfury.orderbook.QueryParticipationExposuresResponse")
	proto.RegisterType((*QueryParticipationExposureRequest)(nil), "furysports.xfury.orderbook.QueryParticipationExposureRequest")
	proto.RegisterType((*QueryParticipationExposureResponse)(nil), "furysports.xfury.orderbook.QueryParticipationExposureResponse")
	proto.RegisterType((*QueryHistoricalParticipationExposuresRequest)(nil), "furysports.xfury.orderbook.QueryHistoricalParticipationExposuresRequest")
	proto.RegisterType((*QueryHistoricalParticipationExposuresResponse)(nil), "furysports.xfury.orderbook.QueryHistoricalParticipationExposuresResponse")
	proto.RegisterType((*QueryParticipationFulfilledBetsRequest)(nil), "furysports.xfury.orderbook.QueryParticipationFulfilledBetsRequest")
	proto.RegisterType((*QueryParticipationFulfilledBetsResponse)(nil), "furysports.xfury.orderbook.QueryParticipationFulfilledBetsResponse")
}

func init() { proto.RegisterFile("xfury/orderbook/query.proto", fileDescriptor_2870b7af7b89d512) }

var fileDescriptor_2870b7af7b89d512 = []byte{
	// 1158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6f, 0xdb, 0x64,
	0x18, 0xef, 0xbb, 0x8d, 0xb2, 0x3e, 0x5b, 0x11, 0x7b, 0xba, 0x7e, 0xc4, 0xa5, 0xe9, 0xea, 0xc1,
	0x3a, 0x8d, 0xc6, 0x6e, 0xd3, 0x4d, 0xda, 0x80, 0x8d, 0x11, 0x89, 0xae, 0x1b, 0x87, 0xa6, 0x91,
	0x18, 0x88, 0x4b, 0xe5, 0xc4, 0x6e, 0x66, 0x35, 0xcd, 0xeb, 0xf9, 0x75, 0x50, 0xab, 0xaa, 0x1c,
	0xe0, 0x00, 0x47, 0x10, 0x82, 0x7f, 0x02, 0x89, 0x0b, 0x07, 0x2e, 0x48, 0xbb, 0xee, 0xc6, 0x04,
	0x1c, 0x76, 0x40, 0x80, 0x5a, 0x24, 0xc4, 0xff, 0x00, 0x08, 0xf9, 0xf5, 0x6b, 0x27, 0x8e, 0x1d,
	0xc7, 0x49, 0x03, 0x83, 0x9b, 0x9d, 0xd7, 0xcf, 0xf3, 0xfc, 0x3e, 0x9e, 0xf7, 0x2b, 0x20, 0x6d,
	0x36, 0xec, 0x5d, 0x95, 0xda, 0xba, 0x61, 0x97, 0x29, 0xdd, 0x52, 0xef, 0x37, 0x0c, 0x7b, 0x57,
	0xb1, 0x6c, 0xea, 0x50, 0xcc, 0xb8, 0x63, 0xcc, 0xa2, 0xb6, 0xc3, 0x14, 0xf7, 0x51, 0x09, 0x3e,
	0x93, 0x2e, 0x55, 0x28, 0xdb, 0xa6, 0x4c, 0x2d, 0x6b, 0xcc, 0xf0, 0x62, 0xd4, 0x77, 0x97, 0xca,
	0x86, 0xa3, 0x2d, 0xa9, 0x96, 0x56, 0x35, 0xeb, 0x9a, 0x63, 0xd2, 0xba, 0x97, 0x46, 0x3a, 0x5b,
	0xa5, 0x55, 0xca, 0x1f, 0x55, 0xf7, 0x49, 0xfc, 0xfa, 0x5c, 0x95, 0xd2, 0x6a, 0xcd, 0x50, 0x35,
	0xcb, 0x54, 0xb5, 0x7a, 0x9d, 0x3a, 0x3c, 0x84, 0x89, 0xd1, 0xe9, 0x36, 0x58, 0x96, 0x66, 0x6b,
	0xdb, 0xfe, 0x60, 0xb6, 0x6d, 0x30, 0x78, 0x12, 0xe3, 0x72, 0x34, 0xd8, 0x31, 0x2b, 0xa6, 0xd5,
	0x0a, 0x6a, 0xa6, 0xed, 0x1b, 0x63, 0xc7, 0xa2, 0xac, 0x61, 0x1b, 0xde, 0xb0, 0x7c, 0x16, 0x70,
	0xdd, 0x65, 0x55, 0xe4, 0x75, 0x4b, 0xc6, 0xfd, 0x86, 0xc1, 0x1c, 0xf9, 0x2e, 0x8c, 0x85, 0x7e,
	0x65, 0x16, 0xad, 0x33, 0x03, 0x5f, 0x85, 0x61, 0x0f, 0xdf, 0x14, 0x39, 0x47, 0x2e, 0x9e, 0xca,
	0xcf, 0x29, 0x1d, 0x85, 0x53, 0xbc, 0xd0, 0xc2, 0x89, 0x87, 0x3f, 0xcd, 0x0e, 0x95, 0x44, 0x98,
	0xbc, 0x03, 0x13, 0x3c, 0xef, 0x9a, 0xfb, 0x59, 0x81, 0xd2, 0x2d, 0xbf, 0x22, 0x4e, 0xc0, 0x30,
	0x73, 0x34, 0xa7, 0xe1, 0xa5, 0x1e, 0x29, 0x89, 0x37, 0x5c, 0x01, 0x68, 0xea, 0x3c, 0x75, 0x8c,
	0x97, 0xbd, 0xa0, 0x78, 0xa6, 0x28, 0xae, 0x29, 0x8a, 0x67, 0xa4, 0x30, 0x45, 0x29, 0x6a, 0x55,
	0x43, 0xe4, 0x2c, 0xb5, 0x44, 0xca, 0x5f, 0x12, 0x98, 0x8c, 0x94, 0x16, 0xb4, 0xee, 0x00, 0x04,
	0xb8, 0xdd, 0xfa, 0xc7, 0x2f, 0x9e, 0xca, 0x3f, 0x9f, 0x40, 0x2d, 0x48, 0x21, 0xd8, 0xb5, 0x44,
	0xe3, 0xad, 0x18, 0xbc, 0xf3, 0x5d, 0xf1, 0x7a, 0x40, 0x42, 0x80, 0xf3, 0x30, 0x1e, 0xc6, 0xeb,
	0x2b, 0x95, 0x81, 0x93, 0x6e, 0xa9, 0x8d, 0x86, 0xa9, 0x0b, 0xad, 0x9e, 0x76, 0xdf, 0xdf, 0x34,
	0x75, 0xb9, 0xdc, 0x2e, 0x6f, 0x40, 0x71, 0x15, 0x46, 0x02, 0x90, 0xc2, 0xbc, 0x5e, 0x18, 0x36,
	0x83, 0xe5, 0x0f, 0x08, 0x64, 0x79, 0x11, 0x77, 0xb8, 0xd8, 0xda, 0x70, 0xac, 0x3b, 0xc2, 0x81,
	0xd9, 0xf9, 0x2d, 0x81, 0xd9, 0x8e, 0x28, 0x04, 0xe7, 0x0a, 0x8c, 0x71, 0x18, 0xa1, 0x59, 0xe1,
	0xfb, 0xbb, 0x90, 0xc0, 0x3e, 0x92, 0x53, 0xa8, 0x80, 0xe5, 0x48, 0xb1, 0xc1, 0xf9, 0xbd, 0x05,
	0x33, 0xf1, 0x84, 0x52, 0xa8, 0xaa, 0xc2, 0x58, 0x88, 0xe4, 0x86, 0x59, 0xd7, 0x8d, 0x1d, 0x8e,
	0xe6, 0x44, 0x09, 0x43, 0x43, 0xb7, 0xdd, 0x91, 0x04, 0x13, 0x03, 0xf5, 0x34, 0xc0, 0xa8, 0x7a,
	0xa2, 0x75, 0xfa, 0x11, 0xef, 0x4c, 0x44, 0x3c, 0xf9, 0x3d, 0xc8, 0x04, 0x20, 0x5e, 0x17, 0xcb,
	0xd2, 0xbf, 0xd9, 0x44, 0x0f, 0x08, 0x48, 0x71, 0x00, 0x84, 0x02, 0x6f, 0xc3, 0x33, 0x1c, 0x81,
	0xbf, 0x62, 0xfa, 0xad, 0xf3, 0x62, 0x17, 0xf6, 0x6b, 0xba, 0xce, 0xfc, 0x6c, 0x82, 0xfc, 0x68,
	0xb9, 0xb5, 0xc2, 0xe0, 0x9a, 0xa6, 0x08, 0x53, 0x11, 0x02, 0x29, 0x04, 0xcc, 0xc0, 0x49, 0xaa,
	0xeb, 0x8c, 0x0f, 0x1d, 0xf3, 0x86, 0xdc, 0x77, 0x77, 0x09, 0x61, 0x31, 0x9e, 0x04, 0x8a, 0xdc,
	0x85, 0xd1, 0x90, 0x22, 0xa2, 0x1d, 0xfa, 0x10, 0xe4, 0x74, 0xab, 0x20, 0xf2, 0x87, 0x04, 0x64,
	0x7f, 0xbf, 0x69, 0xf6, 0xc7, 0x93, 0x68, 0x89, 0x9f, 0x09, 0x9c, 0x4f, 0x44, 0x22, 0x94, 0xa0,
	0x30, 0x19, 0x9e, 0x71, 0xed, 0x4d, 0xb2, 0x98, 0xbc, 0x35, 0x46, 0x73, 0x0b, 0x61, 0x26, 0xac,
	0xd8, 0xc2, 0x83, 0x6b, 0x99, 0xaf, 0x09, 0xcc, 0x75, 0x66, 0xf8, 0x0f, 0x2c, 0x36, 0x6d, 0xde,
	0x1c, 0xef, 0xdb, 0x9b, 0x1f, 0x13, 0xbb, 0x24, 0xb0, 0x66, 0x1b, 0x26, 0xe2, 0xad, 0x39, 0xa2,
	0x33, 0xe3, 0xb1, 0xce, 0x0c, 0xce, 0x98, 0x4f, 0x08, 0x2c, 0x70, 0x7a, 0xab, 0x26, 0x73, 0xa8,
	0x6d, 0x56, 0xb4, 0xda, 0x13, 0x9f, 0x0e, 0xbf, 0x13, 0xc8, 0xa5, 0xc4, 0xf4, 0xbf, 0x9f, 0x18,
	0xdf, 0x10, 0xb8, 0x10, 0x6d, 0xaf, 0x95, 0x46, 0x6d, 0xd3, 0xac, 0xd5, 0x0c, 0xbd, 0x60, 0x38,
	0xec, 0xbf, 0x3c, 0x3b, 0x1e, 0x13, 0x98, 0xef, 0x0a, 0x5f, 0x98, 0xa4, 0x43, 0x18, 0xc9, 0x46,
	0xd9, 0x70, 0x7c, 0x7f, 0xd4, 0xb4, 0xfe, 0x14, 0x0c, 0xa7, 0xa8, 0x99, 0xb6, 0xbf, 0xbd, 0x5b,
	0x6d, 0x63, 0x83, 0x73, 0x26, 0xff, 0xd7, 0xb3, 0xf0, 0x14, 0xa7, 0x86, 0x1f, 0x11, 0x18, 0xf6,
	0x2e, 0x16, 0x98, 0x4b, 0xc0, 0x19, 0xbd, 0xd1, 0x48, 0x4a, 0xda, 0xcf, 0xbd, 0xfa, 0xf2, 0xec,
	0xfb, 0xdf, 0xff, 0xfa, 0xe9, 0xb1, 0x0c, 0x4e, 0xaa, 0xe1, 0xfb, 0x13, 0x13, 0x37, 0x34, 0xfc,
	0x9c, 0x00, 0x34, 0xef, 0x12, 0xb8, 0xd4, 0x2d, 0x7f, 0xe4, 0xca, 0x23, 0xe5, 0x7b, 0x09, 0x11,
	0xb0, 0xe6, 0x38, 0xac, 0x69, 0xcc, 0x44, 0x60, 0xed, 0x79, 0x17, 0xa6, 0x7d, 0xfc, 0x8c, 0xc0,
	0x48, 0x10, 0x89, 0x8b, 0xa9, 0x8b, 0xf8, 0xb0, 0x96, 0x7a, 0x88, 0x10, 0xa8, 0xce, 0x73, 0x54,
	0x33, 0x38, 0x1d, 0x45, 0xe5, 0xcf, 0x93, 0x7d, 0x7c, 0x40, 0x00, 0xa3, 0xa7, 0x75, 0xbc, 0xd6,
	0xad, 0x5c, 0xc7, 0x7b, 0x86, 0xf4, 0x52, 0x3f, 0xa1, 0x02, 0x72, 0x9e, 0x43, 0x5e, 0xc0, 0x4b,
	0x09, 0x90, 0xc3, 0xf7, 0x69, 0x86, 0xdf, 0x11, 0x38, 0x13, 0x49, 0x89, 0x57, 0x7b, 0x46, 0xe1,
	0xe3, 0xbf, 0xd6, 0x47, 0xa4, 0x80, 0xbf, 0xca, 0xe1, 0x17, 0xf0, 0x66, 0x7a, 0xf8, 0xea, 0x5e,
	0xcc, 0xc2, 0xb4, 0x8f, 0x5f, 0x10, 0x18, 0x0d, 0x9d, 0x7f, 0xf1, 0x72, 0x1a, 0x58, 0xed, 0xbb,
	0x91, 0x74, 0xa5, 0xc7, 0x28, 0x41, 0x24, 0xc7, 0x89, 0xcc, 0xe3, 0x0b, 0x49, 0x44, 0x82, 0x3d,
	0x04, 0xbf, 0x22, 0x70, 0xba, 0x35, 0x11, 0x2e, 0xf7, 0x52, 0xd6, 0xc7, 0x7a, 0xb9, 0xb7, 0x20,
	0x01, 0xf5, 0x2a, 0x87, 0x9a, 0xc7, 0xc5, 0x54, 0x50, 0xd5, 0x3d, 0xff, 0x88, 0xbd, 0x8f, 0x3f,
	0x10, 0x98, 0x88, 0xdf, 0x37, 0xf1, 0x7a, 0x8a, 0x75, 0xa9, 0xf3, 0x19, 0x40, 0xba, 0xd1, 0x6f,
	0xb8, 0xe0, 0xf4, 0x32, 0xe7, 0x74, 0x05, 0x97, 0x53, 0xf7, 0x51, 0xae, 0x69, 0xc6, 0x6f, 0x04,
	0xc6, 0x63, 0xf3, 0xe3, 0x2b, 0x7d, 0xc1, 0xf2, 0x49, 0x5d, 0xef, 0x33, 0x5a, 0x70, 0x5a, 0xe7,
	0x9c, 0xde, 0xc0, 0xdb, 0x7d, 0x70, 0xea, 0x30, 0x49, 0xfe, 0x24, 0x70, 0xae, 0xdb, 0x11, 0x08,
	0x6f, 0x75, 0x83, 0x9d, 0xf2, 0x60, 0x27, 0xad, 0x1e, 0x3d, 0x91, 0x90, 0x62, 0x85, 0x4b, 0x71,
	0x13, 0x6f, 0x24, 0x49, 0x71, 0x2f, 0xc8, 0x96, 0xeb, 0xe4, 0xf4, 0x1f, 0x04, 0xa4, 0xce, 0xe7,
	0x0a, 0x7c, 0xad, 0x27, 0xc3, 0xe2, 0x8e, 0x54, 0x52, 0xe1, 0x28, 0x29, 0x04, 0xdb, 0xb7, 0x38,
	0xdb, 0x75, 0x5c, 0x3b, 0xea, 0xa2, 0xa8, 0x6e, 0xfa, 0xf9, 0xf9, 0xc9, 0xa8, 0x70, 0xe7, 0xe1,
	0x41, 0x96, 0x3c, 0x3a, 0xc8, 0x92, 0x5f, 0x0e, 0xb2, 0xe4, 0xe3, 0xc3, 0xec, 0xd0, 0xa3, 0xc3,
	0xec, 0xd0, 0xe3, 0xc3, 0xec, 0xd0, 0x3b, 0x8b, 0x55, 0xd3, 0xb9, 0xd7, 0x28, 0x2b, 0x15, 0xba,
	0xad, 0x6e, 0x6a, 0x75, 0xb7, 0x6e, 0xce, 0x23, 0xe1, 0x61, 0xd8, 0x69, 0xf9, 0xe7, 0xd5, 0xd9,
	0xb5, 0x0c, 0x56, 0x1e, 0xe6, 0xff, 0xbb, 0x2e, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x73,
	0x90, 0x02, 0x90, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OrderBooks queries all order books that match the given status.
	OrderBooks(ctx context.Context, in *QueryOrderBooksRequest, opts ...grpc.CallOption) (*QueryOrderBooksResponse, error)
	// OrderBook queries orderbook info for given order book id.
	OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error)
	// BookParticipations queries participation info for given orderbook.
	BookParticipations(ctx context.Context, in *QueryBookParticipationsRequest, opts ...grpc.CallOption) (*QueryBookParticipationsResponse, error)
	// BookParticipation queries participation info for given orderbook and
	// participation index.
	BookParticipation(ctx context.Context, in *QueryBookParticipationRequest, opts ...grpc.CallOption) (*QueryBookParticipationResponse, error)
	// BookExposures queries exposures info for given orderbook.
	BookExposures(ctx context.Context, in *QueryBookExposuresRequest, opts ...grpc.CallOption) (*QueryBookExposuresResponse, error)
	// BookExposure queries exposure info for given orderbook and odds id.
	BookExposure(ctx context.Context, in *QueryBookExposureRequest, opts ...grpc.CallOption) (*QueryBookExposureResponse, error)
	// ParticipationExposures queries exposures info for given orderbook
	// participations.
	ParticipationExposures(ctx context.Context, in *QueryParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryParticipationExposuresResponse, error)
	// ParticipationExposure queries exposure info for given orderbook
	// participation.
	ParticipationExposure(ctx context.Context, in *QueryParticipationExposureRequest, opts ...grpc.CallOption) (*QueryParticipationExposureResponse, error)
	// HistoricalParticipationExposures queries historical exposures info for
	// given orderbook participation.
	HistoricalParticipationExposures(ctx context.Context, in *QueryHistoricalParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryHistoricalParticipationExposuresResponse, error)
	// ParticipationFulfilledBets queries fulfilled bets for given orderbook
	// participation.
	ParticipationFulfilledBets(ctx context.Context, in *QueryParticipationFulfilledBetsRequest, opts ...grpc.CallOption) (*QueryParticipationFulfilledBetsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBooks(ctx context.Context, in *QueryOrderBooksRequest, opts ...grpc.CallOption) (*QueryOrderBooksResponse, error) {
	out := new(QueryOrderBooksResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/OrderBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error) {
	out := new(QueryOrderBookResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookParticipations(ctx context.Context, in *QueryBookParticipationsRequest, opts ...grpc.CallOption) (*QueryBookParticipationsResponse, error) {
	out := new(QueryBookParticipationsResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/BookParticipations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookParticipation(ctx context.Context, in *QueryBookParticipationRequest, opts ...grpc.CallOption) (*QueryBookParticipationResponse, error) {
	out := new(QueryBookParticipationResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/BookParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookExposures(ctx context.Context, in *QueryBookExposuresRequest, opts ...grpc.CallOption) (*QueryBookExposuresResponse, error) {
	out := new(QueryBookExposuresResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/BookExposures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookExposure(ctx context.Context, in *QueryBookExposureRequest, opts ...grpc.CallOption) (*QueryBookExposureResponse, error) {
	out := new(QueryBookExposureResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/BookExposure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipationExposures(ctx context.Context, in *QueryParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryParticipationExposuresResponse, error) {
	out := new(QueryParticipationExposuresResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/ParticipationExposures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipationExposure(ctx context.Context, in *QueryParticipationExposureRequest, opts ...grpc.CallOption) (*QueryParticipationExposureResponse, error) {
	out := new(QueryParticipationExposureResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/ParticipationExposure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalParticipationExposures(ctx context.Context, in *QueryHistoricalParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryHistoricalParticipationExposuresResponse, error) {
	out := new(QueryHistoricalParticipationExposuresResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/HistoricalParticipationExposures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipationFulfilledBets(ctx context.Context, in *QueryParticipationFulfilledBetsRequest, opts ...grpc.CallOption) (*QueryParticipationFulfilledBetsResponse, error) {
	out := new(QueryParticipationFulfilledBetsResponse)
	err := c.cc.Invoke(ctx, "/xfurysports.xfury.orderbook.Query/ParticipationFulfilledBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// OrderBooks queries all order books that match the given status.
	OrderBooks(context.Context, *QueryOrderBooksRequest) (*QueryOrderBooksResponse, error)
	// OrderBook queries orderbook info for given order book id.
	OrderBook(context.Context, *QueryOrderBookRequest) (*QueryOrderBookResponse, error)
	// BookParticipations queries participation info for given orderbook.
	BookParticipations(context.Context, *QueryBookParticipationsRequest) (*QueryBookParticipationsResponse, error)
	// BookParticipation queries participation info for given orderbook and
	// participation index.
	BookParticipation(context.Context, *QueryBookParticipationRequest) (*QueryBookParticipationResponse, error)
	// BookExposures queries exposures info for given orderbook.
	BookExposures(context.Context, *QueryBookExposuresRequest) (*QueryBookExposuresResponse, error)
	// BookExposure queries exposure info for given orderbook and odds id.
	BookExposure(context.Context, *QueryBookExposureRequest) (*QueryBookExposureResponse, error)
	// ParticipationExposures queries exposures info for given orderbook
	// participations.
	ParticipationExposures(context.Context, *QueryParticipationExposuresRequest) (*QueryParticipationExposuresResponse, error)
	// ParticipationExposure queries exposure info for given orderbook
	// participation.
	ParticipationExposure(context.Context, *QueryParticipationExposureRequest) (*QueryParticipationExposureResponse, error)
	// HistoricalParticipationExposures queries historical exposures info for
	// given orderbook participation.
	HistoricalParticipationExposures(context.Context, *QueryHistoricalParticipationExposuresRequest) (*QueryHistoricalParticipationExposuresResponse, error)
	// ParticipationFulfilledBets queries fulfilled bets for given orderbook
	// participation.
	ParticipationFulfilledBets(context.Context, *QueryParticipationFulfilledBetsRequest) (*QueryParticipationFulfilledBetsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OrderBooks(ctx context.Context, req *QueryOrderBooksRequest) (*QueryOrderBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBooks not implemented")
}
func (*UnimplementedQueryServer) OrderBook(ctx context.Context, req *QueryOrderBookRequest) (*QueryOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (*UnimplementedQueryServer) BookParticipations(ctx context.Context, req *QueryBookParticipationsRequest) (*QueryBookParticipationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookParticipations not implemented")
}
func (*UnimplementedQueryServer) BookParticipation(ctx context.Context, req *QueryBookParticipationRequest) (*QueryBookParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookParticipation not implemented")
}
func (*UnimplementedQueryServer) BookExposures(ctx context.Context, req *QueryBookExposuresRequest) (*QueryBookExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookExposures not implemented")
}
func (*UnimplementedQueryServer) BookExposure(ctx context.Context, req *QueryBookExposureRequest) (*QueryBookExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookExposure not implemented")
}
func (*UnimplementedQueryServer) ParticipationExposures(ctx context.Context, req *QueryParticipationExposuresRequest) (*QueryParticipationExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipationExposures not implemented")
}
func (*UnimplementedQueryServer) ParticipationExposure(ctx context.Context, req *QueryParticipationExposureRequest) (*QueryParticipationExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipationExposure not implemented")
}
func (*UnimplementedQueryServer) HistoricalParticipationExposures(ctx context.Context, req *QueryHistoricalParticipationExposuresRequest) (*QueryHistoricalParticipationExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalParticipationExposures not implemented")
}
func (*UnimplementedQueryServer) ParticipationFulfilledBets(ctx context.Context, req *QueryParticipationFulfilledBetsRequest) (*QueryParticipationFulfilledBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipationFulfilledBets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/OrderBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBooks(ctx, req.(*QueryOrderBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBook(ctx, req.(*QueryOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookParticipations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookParticipationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookParticipations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/BookParticipations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookParticipations(ctx, req.(*QueryBookParticipationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/BookParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookParticipation(ctx, req.(*QueryBookParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/BookExposures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookExposures(ctx, req.(*QueryBookExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/BookExposure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookExposure(ctx, req.(*QueryBookExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipationExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipationExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipationExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/ParticipationExposures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipationExposures(ctx, req.(*QueryParticipationExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipationExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipationExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipationExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/ParticipationExposure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipationExposure(ctx, req.(*QueryParticipationExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalParticipationExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalParticipationExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalParticipationExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/HistoricalParticipationExposures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalParticipationExposures(ctx, req.(*QueryHistoricalParticipationExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipationFulfilledBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipationFulfilledBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipationFulfilledBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xfurysports.xfury.orderbook.Query/ParticipationFulfilledBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipationFulfilledBets(ctx, req.(*QueryParticipationFulfilledBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "furysports.xfury.orderbook.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OrderBooks",
			Handler:    _Query_OrderBooks_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _Query_OrderBook_Handler,
		},
		{
			MethodName: "BookParticipations",
			Handler:    _Query_BookParticipations_Handler,
		},
		{
			MethodName: "BookParticipation",
			Handler:    _Query_BookParticipation_Handler,
		},
		{
			MethodName: "BookExposures",
			Handler:    _Query_BookExposures_Handler,
		},
		{
			MethodName: "BookExposure",
			Handler:    _Query_BookExposure_Handler,
		},
		{
			MethodName: "ParticipationExposures",
			Handler:    _Query_ParticipationExposures_Handler,
		},
		{
			MethodName: "ParticipationExposure",
			Handler:    _Query_ParticipationExposure_Handler,
		},
		{
			MethodName: "HistoricalParticipationExposures",
			Handler:    _Query_HistoricalParticipationExposures_Handler,
		},
		{
			MethodName: "ParticipationFulfilledBets",
			Handler:    _Query_ParticipationFulfilledBets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xfury/orderbook/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOrderBooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orderbooks) > 0 {
		for iNdEx := len(m.Orderbooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orderbooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Orderbook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookParticipations) > 0 {
		for iNdEx := len(m.BookParticipations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BookParticipations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParticipationIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BookParticipation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBookExposuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookExposuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookExposures) > 0 {
		for iNdEx := len(m.BookExposures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BookExposures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookExposureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OddsUid) > 0 {
		i -= len(m.OddsUid)
		copy(dAtA[i:], m.OddsUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OddsUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookExposureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BookExposure.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParticipationExposuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipationExposuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipationExposuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipationExposuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipationExposuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipationExposuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipationExposures) > 0 {
		for iNdEx := len(m.ParticipationExposures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipationExposures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipationExposureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipationExposureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipationExposureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipationIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipationExposureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipationExposureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipationExposureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipationExposure) > 0 {
		for iNdEx := len(m.ParticipationExposure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipationExposure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalParticipationExposuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalParticipationExposuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalParticipationExposuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalParticipationExposuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalParticipationExposuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalParticipationExposuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipationExposures) > 0 {
		for iNdEx := len(m.ParticipationExposures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipationExposures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipationFulfilledBetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipationFulfilledBetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipationFulfilledBetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipationIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookUid) > 0 {
		i -= len(m.BookUid)
		copy(dAtA[i:], m.BookUid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipationFulfilledBetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipationFulfilledBetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipationFulfilledBetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipationBets) > 0 {
		for iNdEx := len(m.ParticipationBets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipationBets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOrderBooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderBooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orderbooks) > 0 {
		for _, e := range m.Orderbooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderBookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderBookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Orderbook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBookParticipationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookParticipationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BookParticipations) > 0 {
		for _, e := range m.BookParticipations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookParticipationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovQuery(uint64(m.ParticipationIndex))
	}
	return n
}

func (m *QueryBookParticipationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BookParticipation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBookExposuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookExposuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BookExposures) > 0 {
		for _, e := range m.BookExposures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookExposureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OddsUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookExposureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BookExposure.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParticipationExposuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipationExposuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipationExposures) > 0 {
		for _, e := range m.ParticipationExposures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipationExposureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovQuery(uint64(m.ParticipationIndex))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipationExposureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipationExposure) > 0 {
		for _, e := range m.ParticipationExposure {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalParticipationExposuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalParticipationExposuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipationExposures) > 0 {
		for _, e := range m.ParticipationExposures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipationFulfilledBetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookUid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovQuery(uint64(m.ParticipationIndex))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipationFulfilledBetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipationBets) > 0 {
		for _, e := range m.ParticipationBets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderbooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderbooks = append(m.Orderbooks, OrderBook{})
			if err := m.Orderbooks[len(m.Orderbooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderbook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Orderbook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookParticipations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookParticipations = append(m.BookParticipations, BookParticipation{})
			if err := m.BookParticipations[len(m.BookParticipations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookParticipation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BookParticipation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookExposures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookExposures = append(m.BookExposures, BookOddsExposure{})
			if err := m.BookExposures[len(m.BookExposures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookExposure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BookExposure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipationExposuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipationExposuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipationExposuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipationExposuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipationExposuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipationExposuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationExposures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationExposures = append(m.ParticipationExposures, ParticipationExposure{})
			if err := m.ParticipationExposures[len(m.ParticipationExposures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipationExposureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipationExposureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipationExposureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipationExposureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipationExposureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipationExposureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationExposure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationExposure = append(m.ParticipationExposure, ParticipationExposure{})
			if err := m.ParticipationExposure[len(m.ParticipationExposure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalParticipationExposuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalParticipationExposuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalParticipationExposuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalParticipationExposuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalParticipationExposuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalParticipationExposuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationExposures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationExposures = append(m.ParticipationExposures, ParticipationExposure{})
			if err := m.ParticipationExposures[len(m.ParticipationExposures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipationFulfilledBetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipationFulfilledBetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipationFulfilledBetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipationFulfilledBetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipationFulfilledBetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipationFulfilledBetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationBets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationBets = append(m.ParticipationBets, ParticipationBetPair{})
			if err := m.ParticipationBets[len(m.ParticipationBets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
