// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xfury/strategicreserve/reserver.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reserver defines the parameters for the StrategicReserve module.
type Reserver struct {
	// sr_pool hold the sr pool properties of the reserver.
	SrPool *SRPool `protobuf:"bytes,1,opt,name=sr_pool,json=srPool,proto3" json:"sr_pool,omitempty" yaml:"sr_pool"`
}

func (m *Reserver) Reset()      { *m = Reserver{} }
func (*Reserver) ProtoMessage() {}
func (*Reserver) Descriptor() ([]byte, []int) {
	return fileDescriptor_456f516fb58ec843, []int{0}
}
func (m *Reserver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reserver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reserver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reserver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reserver.Merge(m, src)
}
func (m *Reserver) XXX_Size() int {
	return m.Size()
}
func (m *Reserver) XXX_DiscardUnknown() {
	xxx_messageInfo_Reserver.DiscardUnknown(m)
}

var xxx_messageInfo_Reserver proto.InternalMessageInfo

func (m *Reserver) GetSrPool() *SRPool {
	if m != nil {
		return m.SrPool
	}
	return nil
}

func init() {
	proto.RegisterType((*Reserver)(nil), "furysports.xfury.strategicreserve.Reserver")
}

func init() {
	proto.RegisterFile("xfury/strategicreserve/reserver.proto", fileDescriptor_456f516fb58ec843)
}

var fileDescriptor_456f516fb58ec843 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0x2b, 0x2d, 0xaa,
	0xd4, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x49, 0x4d, 0xcf, 0x4c, 0x2e, 0x4a, 0x2d, 0x4e, 0x2d, 0x2a,
	0x4b, 0xd5, 0x87, 0xd2, 0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x0a, 0x20, 0x55, 0xc5,
	0x05, 0xf9, 0x45, 0x25, 0xc5, 0x7a, 0x20, 0xa6, 0x1e, 0xba, 0x06, 0x29, 0x91, 0xf4, 0xfc, 0xf4,
	0x7c, 0xb0, 0x62, 0x7d, 0x10, 0x0b, 0xa2, 0x4f, 0x4a, 0x19, 0xbb, 0xe9, 0xc5, 0x45, 0xf1, 0x05,
	0xf9, 0xf9, 0x39, 0x10, 0x45, 0x4a, 0xd9, 0x5c, 0x1c, 0x41, 0x50, 0xeb, 0x84, 0x42, 0xb9, 0xd8,
	0xa1, 0x92, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x1a, 0x7a, 0x84, 0xac, 0xd6, 0x0b, 0x0e,
	0x0a, 0xc8, 0xcf, 0xcf, 0x71, 0x12, 0xfa, 0x74, 0x4f, 0x9e, 0xaf, 0x32, 0x31, 0x37, 0xc7, 0x4a,
	0x09, 0x6a, 0x84, 0x52, 0x10, 0x5b, 0x71, 0x11, 0x48, 0xce, 0x8a, 0x63, 0xc6, 0x02, 0x79, 0x86,
	0x17, 0x0b, 0xe4, 0x19, 0x9d, 0x02, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21,
	0xca, 0x3c, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x2d, 0x31, 0x0f,
	0x64, 0x97, 0x2e, 0xc4, 0x5e, 0x7d, 0xb0, 0x2f, 0x2a, 0x30, 0xfd, 0x51, 0x52, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0xf6, 0x86, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x19, 0x0e, 0xaf, 0x1a, 0x4b,
	0x01, 0x00, 0x00,
}

func (this *Reserver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Reserver)
	if !ok {
		that2, ok := that.(Reserver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SrPool.Equal(that1.SrPool) {
		return false
	}
	return true
}
func (m *Reserver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reserver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reserver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SrPool != nil {
		{
			size, err := m.SrPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReserver(dAtA []byte, offset int, v uint64) int {
	offset -= sovReserver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reserver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrPool != nil {
		l = m.SrPool.Size()
		n += 1 + l + sovReserver(uint64(l))
	}
	return n
}

func sovReserver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReserver(x uint64) (n int) {
	return sovReserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reserver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reserver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reserver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrPool == nil {
				m.SrPool = &SRPool{}
			}
			if err := m.SrPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReserver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReserver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReserver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReserver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReserver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReserver = fmt.Errorf("proto: unexpected end of group")
)
